{"version":3,"sources":["../src/configureStore.js"],"names":["logger","history","saga","router","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middlewares","process","env","NODE_ENV","enhancers","configureStore","reducerRegistry","initialState","sagas","rootReducer","getReducers","store","run","setChangeListener","reducers","replaceReducer"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,MAAMA,SAAS,gCAAf;AACA,MAAMC,UAAU,qCAAhB;AACA,MAAMC,OAAO,0BAAb;AACA,MAAMC,SAAS,wCAAiBF,OAAjB,CAAf;AACA,MAAMG,gBAAgBC,OAAOC,oCAA7B;;AAEA,MAAMC,cAAc,uBAAS,uBAE3BL,IAF2B,EAG3BC,MAH2B,EAI1BK,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA1B,GAA2CV,MAA3C,GAAoD,IAJzB,CAAT,CAApB;;AAOA,MAAMW,YAAY,oBAChB,4BAAgB,GAAGJ,WAAnB,CADgB,EAEhBH,aAFgB,CAAlB;;AAKA,MAAMQ,iBAAiB,CAACC,eAAD,EAAkBC,eAAe,EAAjC,EAAqCC,QAAQ,EAA7C,KAAoD;AACzE,QAAMC,cAAc,iCAAkBH,gBAAgBI,WAAhB,EAAlB,CAApB;;AAGA,QAAMC,QAAQ,wBACZF,WADY,EAEZF,YAFY,EAGZH,SAHY,CAAd;;AAMAT,OAAKiB,GAAL,CAASJ,KAAT;;AAEAF,kBAAgBO,iBAAhB,CAAmCC,QAAD,IAAc;AAC9CH,UAAMI,cAAN,CAAqB,iCAAkBD,QAAlB,CAArB;AACD,GAFD;;AAIA,SAAOH,KAAP;AACD,CAjBD;;QAoBEN,c,GAAAA,c;QACAX,O,GAAAA,O;kBAGaW,c","file":"configureStore.js","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'react-router-redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\nimport createHistory from 'history/createBrowserHistory';\nimport _compact from 'lodash/compact';\n\nimport configureReducers from './configureReducers';\n\nconst logger = createLogger();\nconst history = createHistory();\nconst saga = createSagaMiddleware();\nconst router = routerMiddleware(history);\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\nconst middlewares = _compact([\n  thunk,\n  saga,\n  router,\n  (process.env.NODE_ENV === 'development') ? logger : null\n]);\n\nconst enhancers = compose(\n  applyMiddleware(...middlewares),\n  reduxDevTools\n);\n\nconst configureStore = (reducerRegistry, initialState = {}, sagas = {}) => {\n  const rootReducer = configureReducers(reducerRegistry.getReducers());\n\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    enhancers\n  );\n\n  saga.run(sagas);\n\n  reducerRegistry.setChangeListener((reducers) => {\n    store.replaceReducer(configureReducers(reducers));\n  });\n\n  return store;\n};\n\nexport {\n  configureStore,\n  history\n};\n\nexport default configureStore;\n"]}